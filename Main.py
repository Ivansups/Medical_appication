from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QFormLayout, QLineEdit, QComboBox, QPushButton, QTextEdit, QCheckBox, QFileDialog, QMessageBox, QGroupBox, QHBoxLayout, QLabel, QScrollArea
)
from PySide6.QtCore import Qt, QDate
import sys

from logic.Class import PatientData, Gender, CYP2C19
from logic.Mod1 import mod1, mod1_text
from logic.Mod2 import mod2
from logic.Mod3 import mod3
from logic.Mod4 import mod4
from logic.Mod5 import mod5
import os
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter

DEFAULT_FILENAME = "patients.xlsx"

def create_or_load_workbook(filename=DEFAULT_FILENAME):
    if os.path.exists(filename):
        wb = load_workbook(filename)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        if ws is None:
            ws = wb.create_sheet("Sheet1")
        ws.append([
            "–ü–æ–ª", "–í–æ–∑—Ä–∞—Å—Ç", "–í–µ—Å", "–†–æ—Å—Ç", "–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω", "–ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞", "MPV", "PLCR",
            "–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è", "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 1 –º–∫–ú–æ–ª—å –ê–î–§", "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§",
            "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã", "–ì–µ–Ω–æ—Ç–∏–ø CYP2C19", "–ì–µ–Ω–æ—Ç–∏–ø ABCB1",
            "–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ (ABCB1)",
            "–ú–æ–¥—É–ª—å 1", "–ú–æ–¥—É–ª—å 2", "–ú–æ–¥—É–ª—å 3", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞", "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"
        ])
    return wb, ws

def autofit_columns(ws):
    for column_cells in ws.columns:
        max_length = 0
        column = column_cells[0].column  # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ (1, 2, 3...)
        for cell in column_cells:
            try:
                cell_length = len(str(cell.value))
                if cell_length > max_length:
                    max_length = cell_length
            except:
                pass
        adjusted_width = max_length + 2  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        ws.column_dimensions[get_column_letter(column)].width = adjusted_width

def append_patient_data(filename, data_row):
    wb, ws = create_or_load_workbook(filename)
    if ws is not None:
        ws.append(data_row)
        autofit_columns(ws)  # <--- –≤–æ—Ç –∑–¥–µ—Å—å!
        wb.save(filename)
    else:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Excel")

# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è create_mpv_chart

class ReportWindow(QWidget):
    def __init__(self, report_text, patient_data=None, excel_filename="patients.xlsx"):
        super().__init__()
        self.setWindowTitle("üìã –ü–æ–ª–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É")
        self.resize(900, 700)
        self.patient_data = patient_data
        self.excel_filename = excel_filename
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –ü–ê–¶–ò–ï–ù–¢–£")
        header_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                background-color: #ecf0f1;
                padding: 15px;
                border: 2px solid #3498db;
                border-radius: 8px;
                margin: 5px;
            }
        """)
        header_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(header_label)
        
        # –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É MPV, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if patient_data and len(patient_data) > 6 and patient_data[6]:
            try:
                mpv_value = float(patient_data[6])
                # chart_label = create_mpv_chart(mpv_value) # –£–¥–∞–ª–µ–Ω–æ
                # main_layout.addWidget(chart_label) # –£–¥–∞–ª–µ–Ω–æ
                pass # –£–¥–∞–ª–µ–Ω–æ
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã MPV: {e}')
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.text = QTextEdit()
        self.text.setReadOnly(True)
        self.text.setStyleSheet("""
            QTextEdit {
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 12px;
                line-height: 1.4;
                background-color: #f8f9fa;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                padding: 15px;
                color: #2c3e50;
            }
            QTextEdit:focus {
                border: 2px solid #3498db;
            }
        """)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        formatted_text = self.format_report_text(report_text)
        self.text.setText(formatted_text)
        
        scroll_area.setWidget(self.text)
        main_layout.addWidget(scroll_area)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        copy_button.clicked.connect(self.copy_to_clipboard)
        copy_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #27ae60;
                border-radius: 5px;
                background-color: #27ae60;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª")
        save_button.clicked.connect(self.save_to_file)
        save_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #3498db;
                border-radius: 5px;
                background-color: #3498db;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
        excel_button = QPushButton("üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
        excel_button.clicked.connect(self.save_to_excel)
        excel_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #f39c12;
                border-radius: 5px;
                background-color: #f39c12;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
            QPushButton:pressed {
                background-color: #d35400;
            }
        """)
        
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        close_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #e74c3c;
                border-radius: 5px;
                background-color: #e74c3c;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
        """)
        
        button_layout.addWidget(copy_button)
        button_layout.addWidget(save_button)
        button_layout.addWidget(excel_button)
        button_layout.addStretch()
        button_layout.addWidget(close_button)
        
        main_layout.addLayout(button_layout)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞
        self.setStyleSheet("""
            QWidget {
                background-color: #ecf0f1;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #c0c0c0;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #a0a0a0;
            }
        """)
    
    def format_report_text(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–µ
        text = text.replace("==============================", "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        text = text.replace("------------------------------", "‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        lines = text.split('\n')
        formatted_lines = []
        
        for line in lines:
            if line.strip().startswith('I.') or line.strip().startswith('II.') or line.strip().startswith('III.') or \
               line.strip().startswith('IV.') or line.strip().startswith('V.') or line.strip().startswith('VI.') or \
               line.strip().startswith('VII.') or line.strip().startswith('VIII.'):
                formatted_lines.append(f"<h3 style='color: #2c3e50; background-color: #ecf0f1; padding: 5px; border-radius: 3px;'>{line}</h3>")
            elif line.strip().startswith('–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –û–¢–ß–ï–¢'):
                formatted_lines.append(f"<h2 style='color: #3498db; text-align: center; font-size: 16px;'>{line}</h2>")
            elif line.strip().startswith('–ú–æ–¥—É–ª—å'):
                formatted_lines.append(f"<h4 style='color: #e67e22;'>{line}</h4>")
            elif line.strip().startswith('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:'):
                formatted_lines.append(f"<p style='color: #27ae60; font-weight: bold;'>{line}</p>")
            elif line.strip().startswith('–û—Ü–µ–Ω–∫–∞:'):
                formatted_lines.append(f"<p style='color: #27ae60; font-weight: bold;'>{line}</p>")
            elif line.strip().startswith('‚ïî') or line.strip().startswith('‚ïü'):
                formatted_lines.append(f"<p style='color: #7f8c8d; font-family: monospace;'>{line}</p>")
            else:
                formatted_lines.append(f"<p>{line}</p>")
        
        return '\n'.join(formatted_lines)
    
    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = QApplication.clipboard()
        clipboard.setText(self.text.toPlainText())
        QMessageBox.information(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
            f"–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π_–æ—Ç—á–µ—Ç_{QDate.currentDate().toString('yyyy-MM-dd')}.txt",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.text.toPlainText())
                QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{filename}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
    
    def save_to_excel(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ Excel —Ñ–∞–π–ª"""
        if not self.patient_data:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
            data_row = self.patient_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            append_patient_data(self.excel_filename, data_row)
            
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel", 
                                  f"–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{self.excel_filename}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                               f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel:\n{str(e)}")
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")
            import traceback
            traceback.print_exc()

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        self.resize(1000, 800)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_widget = QWidget()
        layout = QVBoxLayout(content_widget)

        # === –ì–†–£–ü–ü–ê 1: –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê ===
        basic_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        basic_layout = QFormLayout()
        
        # –ü–æ–ª—è –≤—ã–±–æ—Ä–∞
        self.gender = QComboBox()
        self.gender.addItem("")  # –î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.gender.addItems([g.value for g in Gender])
        basic_layout.addRow("–ü–æ–ª (–≤—ã–±–µ—Ä–∏—Ç–µ):", self.gender)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.age = QLineEdit()
        self.age.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)")
        basic_layout.addRow("–í–æ–∑—Ä–∞—Å—Ç:", self.age)

        self.weight = QLineEdit()
        self.weight.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥)")
        basic_layout.addRow("–í–µ—Å:", self.weight)

        self.height_field = QLineEdit()
        self.height_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º)")
        basic_layout.addRow("–†–æ—Å—Ç:", self.height_field)
        
        basic_group.setLayout(basic_layout)
        layout.addWidget(basic_group)

        # === –ì–†–£–ü–ü–ê 2: –ì–ï–ù–û–¢–ò–ü–´ ===
        genotype_group = QGroupBox("–ì–µ–Ω–æ—Ç–∏–ø—ã")
        genotype_layout = QFormLayout()
        
        self.cyp2c19 = QComboBox()
        self.cyp2c19.addItem("")
        self.cyp2c19.addItems([c.value for c in CYP2C19])
        genotype_layout.addRow("–ì–µ–Ω–æ—Ç–∏–ø CYP2C19:", self.cyp2c19)

        self.abcb1 = QComboBox()
        self.abcb1.addItem("")
        self.abcb1.addItems(["TT", "TC", "CC"])
        genotype_layout.addRow("–ì–µ–Ω–æ—Ç–∏–ø ABCB1:", self.abcb1)
        
        genotype_group.setLayout(genotype_layout)
        layout.addWidget(genotype_group)

        # === –ì–†–£–ü–ü–ê 3: –ë–ò–û–•–ò–ú–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ===
        bio_group = QGroupBox("–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        bio_layout = QFormLayout()
        
        self.creatinine = QLineEdit()
        self.creatinine.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω (–º–∫–º–æ–ª—å/–ª)")
        bio_layout.addRow("–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω:", self.creatinine)

        self.creatinine_clearance = QLineEdit()
        self.creatinine_clearance.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞ (–º–ª/–º–∏–Ω)")
        bio_layout.addRow("–ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞:", self.creatinine_clearance)
        
        bio_group.setLayout(bio_layout)
        layout.addWidget(bio_group)

        # === –ì–†–£–ü–ü–ê 4: –¢–†–û–ú–ë–û–¶–ò–¢–ê–†–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ===
        platelet_group = QGroupBox("–¢—Ä–æ–º–±–æ—Ü–∏—Ç–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        platelet_layout = QFormLayout()
        
        self.mpv = QLineEdit()
        self.mpv.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ MPV (—Ñ–ª)")
        platelet_layout.addRow("–í–µ–ª–∏—á–∏–Ω–∞ —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ MPV:", self.mpv)

        self.plcr = QLineEdit()
        self.plcr.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ PLCR (%)")
        platelet_layout.addRow("–û—Ç–Ω. –∫–æ–ª-–≤–æ –±–æ–ª—å—à–∏—Ö —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ PLCR:", self.plcr)
        
        platelet_group.setLayout(platelet_layout)
        layout.addWidget(platelet_group)

        # === –ì–†–£–ü–ü–ê 5: –ê–ì–†–ï–ì–ê–¶–ò–Ø –¢–†–û–ú–ë–û–¶–ò–¢–û–í ===
        aggregation_group = QGroupBox("–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤")
        aggregation_layout = QFormLayout()
        
        self.spontaneous_aggregation = QLineEdit()
        self.spontaneous_aggregation.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é (—É—Å–ª.–µ–¥.)")
        aggregation_layout.addRow("–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è:", self.spontaneous_aggregation)

        self.induced_aggregation_1_ADP = QLineEdit()
        self.induced_aggregation_1_ADP.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 1 –º–∫–ú–æ–ª—å –ê–î–§:", self.induced_aggregation_1_ADP)

        self.induced_aggregation_5_ADP = QLineEdit()
        self.induced_aggregation_5_ADP.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§:", self.induced_aggregation_5_ADP)

        self.induced_aggregation_15_ARA = QLineEdit()
        self.induced_aggregation_15_ARA.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã:", self.induced_aggregation_15_ARA)
        
        aggregation_group.setLayout(aggregation_layout)
        layout.addWidget(aggregation_group)

        # === –ì–†–£–ü–ü–ê 6: –ü–†–ï–ü–ê–†–ê–¢–´ ===
        drugs_group = QGroupBox("–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã")
        drugs_layout = QVBoxLayout()
        
        drugs_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:")
        drugs_layout.addWidget(drugs_label)
        
        self.drug_aspirin = QCheckBox("–ê–°–ö")
        self.drug_clopidogrel = QCheckBox("–ö–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        self.drug_aspirin_clopidogrel = QCheckBox("–ê–°–ö+–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        self.drug_aspirin_ticagrelor = QCheckBox("–ê–°–ö+—Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä")
        
        drugs_layout.addWidget(self.drug_aspirin)
        drugs_layout.addWidget(self.drug_clopidogrel)
        drugs_layout.addWidget(self.drug_aspirin_clopidogrel)
        drugs_layout.addWidget(self.drug_aspirin_ticagrelor)
        
        drugs_group.setLayout(drugs_layout)
        layout.addWidget(drugs_group)

        # === –ì–†–£–ü–ü–ê 7: –î–ï–ô–°–¢–í–ò–Ø ===
        actions_group = QGroupBox("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
        actions_layout = QVBoxLayout()
        
        self.report_button = QPushButton("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        self.report_button.clicked.connect(self.generate_report)
        actions_layout.addWidget(self.report_button)

        self.save_excel_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel")
        self.save_excel_button.clicked.connect(self.save_to_excel)
        actions_layout.addWidget(self.save_excel_button)

        self.choose_excel_button = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª Excel")
        self.choose_excel_button.clicked.connect(self.choose_excel_file)
        actions_layout.addWidget(self.choose_excel_button)
        
        actions_group.setLayout(actions_layout)
        layout.addWidget(actions_group)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(content_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(scroll_area)

        self.excel_filename = DEFAULT_FILENAME

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 1ex;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #2c3e50;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #f8f9fa;
            }
            QLineEdit:focus {
                border: 2px solid #3498db;
                background-color: white;
            }
            QComboBox {
                padding: 5px;
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #ecf0f1;
            }
            QComboBox:focus {
                border: 2px solid #3498db;
            }
            QPushButton {
                padding: 8px 16px;
                border: 2px solid #3498db;
                border-radius: 5px;
                background-color: #3498db;
                color: white;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
            QCheckBox {
                spacing: 8px;
                font-weight: normal;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #c0c0c0;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #a0a0a0;
            }
        """)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –ø–æ–ª—è–º
        self.age.textChanged.connect(self.validate_age)
        self.weight.textChanged.connect(self.validate_weight)
        self.height_field.textChanged.connect(self.validate_height)
        self.creatinine.textChanged.connect(self.validate_creatinine)
        self.creatinine_clearance.textChanged.connect(self.validate_creatinine_clearance)
        self.mpv.textChanged.connect(self.validate_mpv)
        self.plcr.textChanged.connect(self.validate_plcr)
        self.spontaneous_aggregation.textChanged.connect(self.validate_spontaneous_aggregation)
        self.induced_aggregation_1_ADP.textChanged.connect(self.validate_induced_aggregation_1_ADP)
        self.induced_aggregation_5_ADP.textChanged.connect(self.validate_induced_aggregation_5_ADP)
        self.induced_aggregation_15_ARA.textChanged.connect(self.validate_induced_aggregation_15_ARA)

    def validate_age(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        try:
            age = int(self.age.text())
            if age <= 0 or age > 120:
                self.age.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.age.setStyleSheet("")
                return True
        except ValueError:
            self.age.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
            return False

    def validate_weight(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞"""
        try:
            weight = float(self.weight.text())
            if weight <= 0 or weight > 300:
                self.weight.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.weight.setStyleSheet("")
                return True
        except ValueError:
            self.weight.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
            return False

    def validate_height(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞"""
        try:
            height = float(self.height_field.text())
            if height <= 0 or height > 250:
                self.height_field.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.height_field.setStyleSheet("")
                return True
        except ValueError:
            if self.height_field.text():
                self.height_field.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.height_field.setStyleSheet("")
                return True

    def validate_creatinine(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞"""
        try:
            creatinine = float(self.creatinine.text())
            if creatinine <= 0 or creatinine > 1000:
                self.creatinine.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine.setStyleSheet("")
                return True
        except ValueError:
            if self.creatinine.text():  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                self.creatinine.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine.setStyleSheet("")
                return True

    def validate_creatinine_clearance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏—Ä–µ–Ω—Å–∞ –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞"""
        try:
            clearance = float(self.creatinine_clearance.text())
            if clearance <= 0 or clearance > 200:
                self.creatinine_clearance.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine_clearance.setStyleSheet("")
                return True
        except ValueError:
            if self.creatinine_clearance.text():
                self.creatinine_clearance.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine_clearance.setStyleSheet("")
                return True

    def validate_mpv(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ MPV"""
        try:
            mpv = float(self.mpv.text())
            if mpv <= 0 or mpv > 20:
                self.mpv.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.mpv.setStyleSheet("")
                return True
        except ValueError:
            if self.mpv.text():
                self.mpv.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.mpv.setStyleSheet("")
                return True

    def validate_plcr(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ PLCR"""
        try:
            plcr = float(self.plcr.text())
            if plcr < 0 or plcr > 100:
                self.plcr.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.plcr.setStyleSheet("")
                return True
        except ValueError:
            if self.plcr.text():
                self.plcr.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.plcr.setStyleSheet("")
                return True

    def validate_spontaneous_aggregation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        try:
            agg = float(self.spontaneous_aggregation.text())
            if agg < 0 or agg > 100:
                self.spontaneous_aggregation.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.spontaneous_aggregation.setStyleSheet("")
                return True
        except ValueError:
            if self.spontaneous_aggregation.text():
                self.spontaneous_aggregation.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.spontaneous_aggregation.setStyleSheet("")
                return True

    def validate_induced_aggregation_1_ADP(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 1 –º–∫–ú–æ–ª—å –ê–î–§"""
        try:
            agg = float(self.induced_aggregation_1_ADP.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_1_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_1_ADP.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_1_ADP.text():
                self.induced_aggregation_1_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_1_ADP.setStyleSheet("")
                return True

    def validate_induced_aggregation_5_ADP(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 5 –º–∫–ú–æ–ª—å –ê–î–§"""
        try:
            agg = float(self.induced_aggregation_5_ADP.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_5_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_5_ADP.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_5_ADP.text():
                self.induced_aggregation_5_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_5_ADP.setStyleSheet("")
                return True

    def validate_induced_aggregation_15_ARA(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã"""
        try:
            agg = float(self.induced_aggregation_15_ARA.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_15_ARA.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_15_ARA.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_15_ARA.text():
                self.induced_aggregation_15_ARA.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_15_ARA.setStyleSheet("")
                return True

    def validate_all_fields(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        validations = [
            self.validate_age(),
            self.validate_weight(),
            self.validate_height(),
            self.validate_creatinine(),
            self.validate_creatinine_clearance(),
            self.validate_mpv(),
            self.validate_plcr(),
            self.validate_spontaneous_aggregation(),
            self.validate_induced_aggregation_1_ADP(),
            self.validate_induced_aggregation_5_ADP(),
            self.validate_induced_aggregation_15_ARA()
        ]

        if not all(validations):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –ø–æ–ª—è—Ö (–≤—ã–¥–µ–ª–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º)")
            return False
        return True

    def generate_report(self):
        try:
            if not self.validate_all_fields():
                return
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            gender = Gender(self.gender.currentText()) if self.gender.currentText() else None
            age = int(self.age.text()) if self.age.text() else None
            T = float(self.induced_aggregation_5_ADP.text()) if self.induced_aggregation_5_ADP.text() else None
            cyp = self.cyp2c19.currentText() if self.cyp2c19.currentText() else None
            cyp_enum = CYP2C19(cyp) if cyp else None

            T2 = float(self.induced_aggregation_15_ARA.text()) if self.induced_aggregation_15_ARA.text() else None
            T3 = float(self.spontaneous_aggregation.text()) if self.spontaneous_aggregation.text() else None

            patient = PatientData(
                gender=gender,
                age=age,
                T=T,
                cyp2c19=cyp_enum
            )

            # –ú–æ–¥—É–ª—å 1
            mod1_score, mod1_recommendations = mod1_first(patient.T, patient.cyp2c19.value if patient.cyp2c19 else None)
            mod1_text = f"–ú–æ–¥—É–ª—å 1:\n–û—Ü–µ–Ω–∫–∞: {mod1_score}\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + "\n".join(mod1_recommendations)

            # –ú–æ–¥—É–ª—å 2
            mod2_res = mod2_first(T2)
            mod2_text = (
                f"–ú–æ–¥—É–ª—å 2:\n"
                f"{mod2_res[0]}\n"
                f"{mod2_res[1]}\n"
                f"{mod2_res[2] if len(mod2_res) > 2 else ''}"
            )

            # –ú–æ–¥—É–ª—å 3
            mod3_res = mod3_first(T3)
            mod3_text = (
                f"–ú–æ–¥—É–ª—å 3:\n"
                f"{mod3_res[0]}\n"
                f"{mod3_res[1]}\n"
                f"{mod3_res[2] if len(mod3_res) > 2 else ''}"
            )

            abcb1 = self.abcb1.currentText() if self.abcb1.currentText() else None
            drugs = []
            if self.drug_aspirin.isChecked():
                drugs.append("–ê–°–ö")
            if self.drug_clopidogrel.isChecked():
                drugs.append("–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
            if self.drug_aspirin_clopidogrel.isChecked():
                drugs.append("–ê–°–ö+–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
            if self.drug_aspirin_ticagrelor.isChecked():
                drugs.append("–ê–°–ö+—Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä")

            abcb1_result = mod1_first_ABCB1(abcb1) if abcb1 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            aggregation_state = mod1_second(T)[0] if T is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            report = (
                "==============================\n"
                "        –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –û–¢–ß–ï–¢\n"
                "==============================\n\n"
                "I. –û–ë–©–ò–ï –î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê\n"
                "------------------------------\n"
                f"–ü–æ–ª: {gender.value if gender else ''}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {age if age else ''}\n"
                f"–í–µ—Å: {self.weight.text()}\n"
                f"–†–æ—Å—Ç: {self.height_field.text()}\n"
                f"–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω: {self.creatinine.text()}\n"
                f"–ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞: {self.creatinine_clearance.text()}\n"
                f"MPV: {self.mpv.text()}\n"
                f"PLCR: {self.plcr.text()}\n"
                f"–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è: {self.spontaneous_aggregation.text()}\n"
                f"–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 1 –º–∫–ú–æ–ª—å –ê–î–§: {self.induced_aggregation_1_ADP.text()}\n"
                f"–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§: {self.induced_aggregation_5_ADP.text()}\n"
                f"–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã: {self.induced_aggregation_15_ARA.text()}\n"
                "\n"
                "II. –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï\n"
                "------------------------------\n"
                f"–ì–µ–Ω–æ—Ç–∏–ø CYP2C19: {cyp if cyp else ''}\n"
                f"–ì–µ–Ω–æ—Ç–∏–ø ABCB1: {abcb1 if abcb1 else ''}\n"
                "\n"
                "III. –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–Ø\n"
                "------------------------------\n"
                f"–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: {', '.join(drugs)}\n"
                "\n"
                "IV. –°–û–°–¢–û–Ø–ù–ò–ï –ê–ì–†–ï–ì–ê–¶–ò–ò –¢–†–û–ú–ë–û–¶–ò–¢–û–í\n"
                "------------------------------\n"
                f"{aggregation_state}\n"
                "\n"
                "V. –ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–ê\n"
                "------------------------------\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ (ABCB1): {abcb1_result}\n"
                f"{mod1_text}\n"
                "\n"
                "VI. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–û–î–£–õ–Æ 2 (–ê–°–ö)\n"
                "------------------------------\n"
                f"{mod2_text}\n"
                "\n"
                "VII. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–û–î–£–õ–Æ 3 (–¢–ò–ö–ê–ì–†–ï–õ–û–†)\n"
                "------------------------------\n"
                f"{mod3_text}\n"
                "\n"
            )
            # –ë–ª–æ–∫ –ü–†–û–ì–ù–û–ó
            try:
                prognosis_value = calculate_prognosis(
                    gender.value if gender else None,
                    age,
                    float(self.weight.text()) if self.weight.text() else None,
                    float(self.height_field.text()) if self.height_field.text() else None,
                    float(self.creatinine.text()) if self.creatinine.text() else None,
                    float(self.creatinine_clearance.text()) if self.creatinine_clearance.text() else None,
                    float(self.mpv.text()) if self.mpv.text() else None,
                    float(self.plcr.text()) if self.plcr.text() else None,
                    float(self.spontaneous_aggregation.text()) if self.spontaneous_aggregation.text() else None,
                    float(self.induced_aggregation_1_ADP.text()) if self.induced_aggregation_1_ADP.text() else None,
                    float(self.induced_aggregation_5_ADP.text()) if self.induced_aggregation_5_ADP.text() else None,
                    float(self.induced_aggregation_15_ARA.text()) if self.induced_aggregation_15_ARA.text() else None,
                )
                prognosis_result = prognosis_text(prognosis_value)
                prognosis_block = (
                    "VIII. –ü–†–û–ì–ù–û–ó\n"
                    "------------------------------\n"
                    f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {prognosis_value:.3f}\n"
                    f"–û—Ü–µ–Ω–∫–∞: {prognosis_result}\n"
                    "==============================\n"
                )
            except Exception as e:
                prognosis_block = (
                    "VIII. –ü–†–û–ì–ù–û–ó\n"
                    "------------------------------\n"
                    f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}\n"
                    "==============================\n"
                )

            report += prognosis_block

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
            data_row = [
                gender.value if gender else '',
                age if age else '',
                self.weight.text(),
                self.height_field.text(),
                self.creatinine.text(),
                self.creatinine_clearance.text(),
                self.mpv.text(),
                self.plcr.text(),
                self.spontaneous_aggregation.text(),
                self.induced_aggregation_1_ADP.text(),
                self.induced_aggregation_5_ADP.text(),
                self.induced_aggregation_15_ARA.text(),
                cyp if cyp else '',
                abcb1 if abcb1 else '',
                ', '.join(drugs),
                aggregation_state,
                abcb1_result,
                f"{mod1_score}: {'; '.join(mod1_recommendations)}",
                "; ".join([str(x) for x in mod2_res if x]),
                "; ".join([str(x) for x in mod3_res if x]),
                prognosis_value if 'prognosis_value' in locals() else '',
                prognosis_result if 'prognosis_result' in locals() else ''
            ]

            self.report_window = ReportWindow(report, data_row, self.excel_filename)
            self.report_window.show()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", 
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n{str(e)}")
            print(f"–û—à–∏–±–∫–∞ –≤ generate_report: {e}")
            import traceback
            traceback.print_exc()

    def choose_excel_file(self):
        filename, _ = QFileDialog.getSaveFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", self.excel_filename, "Excel Files (*.xlsx)")
        if filename:
            self.excel_filename = filename

    def save_to_excel(self):
        if not self.validate_all_fields():
            return
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ self.excel_filename, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        # –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –≤ generate_report
        gender = self.gender.currentText()
        age = self.age.text()
        weight = self.weight.text()
        height = self.height_field.text()
        creatinine = self.creatinine.text()
        creatinine_clearance = self.creatinine_clearance.text()
        mpv = self.mpv.text()
        plcr = self.plcr.text()
        spontaneous_aggregation = self.spontaneous_aggregation.text()
        induced_aggregation_1_ADP = self.induced_aggregation_1_ADP.text()
        induced_aggregation_5_ADP = self.induced_aggregation_5_ADP.text()
        induced_aggregation_15_ARA = self.induced_aggregation_15_ARA.text()
        cyp = self.cyp2c19.currentText()
        abcb1 = self.abcb1.currentText()
        drugs = []
        if self.drug_aspirin.isChecked():
            drugs.append("–ê–°–ö")
        if self.drug_clopidogrel.isChecked():
            drugs.append("–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        if self.drug_aspirin_clopidogrel.isChecked():
            drugs.append("–ê–°–ö+–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        if self.drug_aspirin_ticagrelor.isChecked():
            drugs.append("–ê–°–ö+—Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä")
        drugs_str = ", ".join(drugs)

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∫–∞–∫ –≤ generate_report)
        T = float(self.induced_aggregation_5_ADP.text()) if self.induced_aggregation_5_ADP.text() else None
        aggregation_state = mod1_second(T)[0] if T is not None else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        abcb1_result = mod1_first_ABCB1(abcb1) if abcb1 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        mod1_score, mod1_recommendations = mod1_first(T, cyp)
        mod1_text = f"{mod1_score}: {'; '.join(mod1_recommendations)}"
        T2 = float(self.induced_aggregation_15_ARA.text()) if self.induced_aggregation_15_ARA.text() else None
        mod2_res = mod2_first(T2)
        mod2_text = "; ".join([str(x) for x in mod2_res if x])
        T3 = float(self.spontaneous_aggregation.text()) if self.spontaneous_aggregation.text() else None
        mod3_res = mod3_first(T3)
        mod3_text = "; ".join([str(x) for x in mod3_res if x])

        try:
            prognosis_value = calculate_prognosis(
                gender,
                int(age) if age else None,
                float(weight) if weight else None,
                float(height) if height else None,
                float(creatinine) if creatinine else None,
                float(creatinine_clearance) if creatinine_clearance else None,
                float(mpv) if mpv else None,
                float(plcr) if plcr else None,
                float(spontaneous_aggregation) if spontaneous_aggregation else None,
                float(induced_aggregation_1_ADP) if induced_aggregation_1_ADP else None,
                float(induced_aggregation_5_ADP) if induced_aggregation_5_ADP else None,
                float(induced_aggregation_15_ARA) if induced_aggregation_15_ARA else None,
            )
            prognosis_result = prognosis_text(prognosis_value)
        except Exception as e:
            prognosis_value = ""
            prognosis_result = f"–û—à–∏–±–∫–∞: {e}"

        data_row = [
            gender, age, weight, height, creatinine, creatinine_clearance, mpv, plcr,
            spontaneous_aggregation, induced_aggregation_1_ADP, induced_aggregation_5_ADP,
            induced_aggregation_15_ARA, cyp, abcb1, drugs_str, aggregation_state,
            abcb1_result, mod1_text, mod2_text, mod3_text, prognosis_value, prognosis_result
        ]
        append_patient_data(self.excel_filename, data_row)
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{self.excel_filename}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
