from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QFormLayout, QLineEdit, QComboBox, 
    QPushButton, QTextEdit, QCheckBox, QFileDialog, QMessageBox, QGroupBox, 
    QHBoxLayout, QLabel, QScrollArea, QDialog, QButtonGroup, QRadioButton
)
from PySide6.QtCore import Qt, QDate
from PySide6.QtPrintSupport import QPrintDialog, QPrinter
from PySide6.QtGui import QTextDocument
import sys
from logic.Class import PatientData, Gender, CYP2C19
from logic.Mod1 import mod1, mod1_text
from logic.Mod2 import mod2
from logic.Mod3 import mod3
from logic.Mod4 import mod4
from logic.Mod5 import mod5
import os
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter
import docx
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.enum.text import WD_BREAK

DEFAULT_FILENAME = "patients.xlsx"

def format_html_table(headers, rows):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ HTML —Ç–∞–±–ª–∏—Ü—É"""
    html = '<table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%; margin: 10px 0;">'
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    html += '<tr style="background-color: #f2f2f2; font-weight: bold;">'
    for header in headers:
        html += f'<th style="border: 1px solid #ddd; padding: 8px; text-align: center;">{header}</th>'
    html += '</tr>'
    
    # –î–∞–Ω–Ω—ã–µ
    for row in rows:
        html += '<tr>'
        for cell in row:
            html += f'<td style="border: 1px solid #ddd; padding: 8px;">{cell}</td>'
        html += '</tr>'
    
    html += '</table>'
    return html

def create_or_load_workbook(filename=DEFAULT_FILENAME):
    if os.path.exists(filename):
        wb = load_workbook(filename)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        if ws is None:
            ws = wb.create_sheet("Sheet1")
        ws.append([
            "–ü–æ–ª", "–í–æ–∑—Ä–∞—Å—Ç", "–í–µ—Å", "–†–æ—Å—Ç", "–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω", "–ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞", "MPV", "PLCR",
            "–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è", "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 1 –º–∫–ú–æ–ª—å –ê–î–§", "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§",
            "–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã", "–ì–µ–Ω–æ—Ç–∏–ø CYP2C19", "–ì–µ–Ω–æ—Ç–∏–ø ABCB1",
            "–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ (ABCB1)",
            "–ú–æ–¥—É–ª—å 1", "–ú–æ–¥—É–ª—å 2", "–ú–æ–¥—É–ª—å 3", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞", "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"
        ])
    return wb, ws

def autofit_columns(ws):
    for column_cells in ws.columns:
        max_length = 0
        column = column_cells[0].column  # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ (1, 2, 3...)
        for cell in column_cells:
            try:
                cell_length = len(str(cell.value))
                if cell_length > max_length:
                    max_length = cell_length
            except:
                pass
        adjusted_width = max_length + 2  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        ws.column_dimensions[get_column_letter(column)].width = adjusted_width

def append_patient_data(filename, data_row):
    wb, ws = create_or_load_workbook(filename)
    if ws is not None:
        ws.append(data_row)
        autofit_columns(ws)
        wb.save(filename)
    else:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Excel")

def set_cell_border(cell, border_style="single", border_size=4, border_color="000000"):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ docx"""
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()
    
    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞–Ω–∏—Ü—ã
    tcBorders = OxmlElement('w:tcBorders')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
    for border_name in ['top', 'left', 'bottom', 'right']:
        border = OxmlElement(f'w:{border_name}')
        border.set(qn('w:val'), border_style)
        border.set(qn('w:sz'), str(border_size))
        border.set(qn('w:color'), border_color)
        tcBorders.append(border)
    
    tcPr.append(tcBorders)

def add_table_with_title(doc, headers, rows, title, column_widths=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    title_para = doc.add_paragraph(title)
    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    title_para.runs[0].bold = True
    title_para.runs[0].font.size = Pt(12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
    # Word –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = doc.add_table(rows=len(rows) + 1, cols=len(headers))
    table.style = 'Table Grid'
    table.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if column_widths:
        for i, width in enumerate(column_widths):
            for cell in table.columns[i].cells:
                cell.width = Inches(width)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for i, header in enumerate(headers):
        cell = table.cell(0, i)
        cell.text = header
        cell.paragraphs[0].runs[0].bold = True
        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        set_cell_border(cell)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for row_idx, row_data in enumerate(rows, 1):
        for col_idx, cell_data in enumerate(row_data):
            cell = table.cell(row_idx, col_idx)
            cell.text = str(cell_data)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            set_cell_border(cell)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
    doc.add_paragraph()

def add_simple_table(doc, headers, rows, column_widths=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = doc.add_table(rows=len(rows) + 1, cols=len(headers))
    table.style = 'Table Grid'
    table.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if column_widths:
        for i, width in enumerate(column_widths):
            for cell in table.columns[i].cells:
                cell.width = Inches(width)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for i, header in enumerate(headers):
        cell = table.cell(0, i)
        cell.text = header
        cell.paragraphs[0].runs[0].bold = True
        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        set_cell_border(cell)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for row_idx, row_data in enumerate(rows, 1):
        for col_idx, cell_data in enumerate(row_data):
            cell = table.cell(row_idx, col_idx)
            cell.text = str(cell_data)
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            set_cell_border(cell)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
    doc.add_paragraph()

class ReportWindow(QWidget):
    def __init__(self, report_text, patient_data=None, excel_filename="patients.xlsx"):
        super().__init__()
        self.setWindowTitle("üìã –ü–æ–ª–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É")
        self.resize(900, 700)
        self.patient_data = patient_data
        self.excel_filename = excel_filename
        self.current_report_data = None
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –ü–ê–¶–ò–ï–ù–¢–£")
        header_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                background-color: #ecf0f1;
                padding: 15px;
                border: 2px solid #3498db;
                border-radius: 8px;
                margin: 5px;
            }
        """)
        header_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(header_label)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.text = QTextEdit()
        self.text.setReadOnly(True)
        self.text.setStyleSheet("""
            QTextEdit {
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
                font-size: 12px;
                line-height: 1.4;
                background-color: #f8f9fa;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                padding: 15px;
                color: #2c3e50;
            }
            QTextEdit:focus {
                border: 2px solid #3498db;
            }
        """)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        formatted_text = self.format_report_text(report_text)
        self.text.setText(formatted_text)
        
        scroll_area.setWidget(self.text)
        main_layout.addWidget(scroll_area)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        copy_button.clicked.connect(self.copy_to_clipboard)
        copy_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #27ae60;
                border-radius: 5px;
                background-color: #27ae60;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DOC
        doc_button = QPushButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ DOC")
        doc_button.clicked.connect(self.save_to_doc)
        doc_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #3498db;
                border-radius: 5px;
                background-color: #3498db;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        close_button.setStyleSheet("""
            QPushButton {
                padding: 10px 20px;
                border: 2px solid #7f8c8d;
                border-radius: 5px;
                background-color: #7f8c8d;
                color: white;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #636e72;
            }
            QPushButton:pressed {
                background-color: #2d3436;
            }
        """)
        
        button_layout.addWidget(copy_button)
        button_layout.addWidget(doc_button)
        button_layout.addStretch()
        button_layout.addWidget(close_button)
        
        main_layout.addLayout(button_layout)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –æ–∫–Ω–∞
        self.setStyleSheet("""
            QWidget {
                background-color: #ecf0f1;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                background-color: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #c0c0c0;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #a0a0a0;
            }
        """)
    
    def format_report_text(self, text):
        """–î–ª—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å"""
        return text
    
    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = QApplication.clipboard()
        clipboard.setText(self.text.toPlainText())
        QMessageBox.information(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    
    def save_to_doc(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ DOC —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        if not self.current_report_data:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DOC")
            return
            
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ DOC", 
            f"–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π_–æ—Ç—á–µ—Ç_{QDate.currentDate().toString('yyyy-MM-dd')}.docx",
            "Word Documents (*.docx);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if filename:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                doc = docx.Document()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = doc.add_heading('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø', 0)
                title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                doc.add_paragraph(f"–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {self.current_report_data['date']}")
                doc.add_paragraph(f"–§–ò–û: {self.current_report_data['name']}")
                doc.add_paragraph(f"–í–æ–∑—Ä–∞—Å—Ç: {self.current_report_data['age']}")
                doc.add_paragraph()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö
                doc.add_paragraph().add_run("–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç–æ–≤:").bold = True
                doc.add_paragraph(f"–ê–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: {self.current_report_data['drugs']}")
                doc.add_paragraph()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                add_table_with_title(doc, 
                    ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–û—Ü–µ–Ω–∫–∞", "–ü—Ä–æ–≥–Ω–æ–∑"],
                    self.current_report_data['main_table_rows'],
                    "–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞—Ç–æ–≤:"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–û—Ü–µ–Ω–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['cyp_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ì–ï–ù–û–¢–ò–ü–ê CYP 2C19"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞ ABCB1", "–û—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['abcb1_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ê–ö–¢–ò–í–ù–û–°–¢–ò –¢–†–ê–ù–°–ü–û–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´ P-–ì–õ–ò–ö–û–ü–†–û–¢–ï–ò–ù–ê"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['ticagrelor_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –¢–ò–ö–ê–ì–†–ï–õ–û–†–û–ú"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['aspirin_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –ê–¶–ï–¢–ò–õ–°–ê–õ–ò–¶–ò–õ–û–í–û–ô –ö–ò–°–õ–û–¢–û–ô"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.save(filename)
                QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DOC —Ñ–∞–π–ª:\n{filename}")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å DOC —Ñ–∞–π–ª:\n{str(e)}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ DOC: {e}")

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è")
        self.resize(1000, 800)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_widget = QWidget()
        layout = QVBoxLayout(content_widget)

        # === –ì–†–£–ü–ü–ê 1: –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê ===
        basic_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        basic_layout = QFormLayout()
        
        # –ü–æ–ª—è –≤—ã–±–æ—Ä–∞
        self.gender = QComboBox()
        self.gender.addItem("")  # –î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.gender.addItems([g.value for g in Gender])
        basic_layout.addRow("–ü–æ–ª (–≤—ã–±–µ—Ä–∏—Ç–µ):", self.gender)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.age = QLineEdit()
        self.age.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)")
        basic_layout.addRow("–í–æ–∑—Ä–∞—Å—Ç:", self.age)

        self.weight = QLineEdit()
        self.weight.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥)")
        basic_layout.addRow("–í–µ—Å:", self.weight)

        self.height_field = QLineEdit()
        self.height_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º)")
        basic_layout.addRow("–†–æ—Å—Ç:", self.height_field)
        
        basic_group.setLayout(basic_layout)
        layout.addWidget(basic_group)

        # === –ì–†–£–ü–ü–ê 2: –ì–ï–ù–û–¢–ò–ü–´ ===
        genotype_group = QGroupBox("–ì–µ–Ω–æ—Ç–∏–ø—ã")
        genotype_layout = QFormLayout()
        
        self.cyp2c19 = QComboBox()
        self.cyp2c19.addItem("")
        self.cyp2c19.addItems([c.value for c in CYP2C19])
        genotype_layout.addRow("–ì–µ–Ω–æ—Ç–∏–ø CYP2C19:", self.cyp2c19)

        self.abcb1 = QComboBox()
        self.abcb1.addItem("")
        self.abcb1.addItems(["TT", "TC", "CC"])
        genotype_layout.addRow("–ì–µ–Ω–æ—Ç–∏–ø ABCB1:", self.abcb1)
        
        genotype_group.setLayout(genotype_layout)
        layout.addWidget(genotype_group)

        # === –ì–†–£–ü–ü–ê 3: –ë–ò–û–•–ò–ú–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ===
        bio_group = QGroupBox("–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        bio_layout = QFormLayout()
        
        self.creatinine = QLineEdit()
        self.creatinine.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω (–º–∫–º–æ–ª—å/–ª)")
        bio_layout.addRow("–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω:", self.creatinine)

        self.creatinine_clearance = QLineEdit()
        self.creatinine_clearance.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞ (–º–ª/–º–∏–Ω)")
        bio_layout.addRow("–ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞:", self.creatinine_clearance)
        
        bio_group.setLayout(bio_layout)
        layout.addWidget(bio_group)

        # === –ì–†–£–ü–ü–ê 4: –¢–†–û–ú–ë–û–¶–ò–¢–ê–†–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ===
        platelet_group = QGroupBox("–¢—Ä–æ–º–±–æ—Ü–∏—Ç–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        platelet_layout = QFormLayout()
        
        self.mpv = QLineEdit()
        self.mpv.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ MPV (—Ñ–ª)")
        platelet_layout.addRow("–í–µ–ª–∏—á–∏–Ω–∞ —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ MPV:", self.mpv)

        self.plcr = QLineEdit()
        self.plcr.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ PLCR (%)")
        platelet_layout.addRow("–û—Ç–Ω. –∫–æ–ª-–≤–æ –±–æ–ª—å—à–∏—Ö —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ PLCR:", self.plcr)
        
        platelet_group.setLayout(platelet_layout)
        layout.addWidget(platelet_group)

        # === –ì–†–£–ü–ü–ê 5: –ê–ì–†–ï–ì–ê–¶–ò—è –¢–†–û–ú–ë–û–¶–ò–¢–û–í ===
        aggregation_group = QGroupBox("–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤")
        aggregation_layout = QFormLayout()
        
        self.spontaneous_aggregation = QLineEdit()
        self.spontaneous_aggregation.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é (—É—Å–ª.–µ–¥.)")
        aggregation_layout.addRow("–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è:", self.spontaneous_aggregation)

        self.induced_aggregation_1_ADP = QLineEdit()
        self.induced_aggregation_1_ADP.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 1 –º–∫–ú–æ–ª—å –ê–î–§:", self.induced_aggregation_1_ADP)

        self.induced_aggregation_5_ADP = QLineEdit()
        self.induced_aggregation_5_ADP.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§:", self.induced_aggregation_5_ADP)

        self.induced_aggregation_15_ARA = QLineEdit()
        self.induced_aggregation_15_ARA.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ % –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        aggregation_layout.addRow("–ò–Ω–¥—É—Ü. –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã:", self.induced_aggregation_15_ARA)
        
        aggregation_group.setLayout(aggregation_layout)
        layout.addWidget(aggregation_group)

        # === –ì–†–£–ü–ü–ê 6: –ü–†–ï–ü–ê–†–ê–¢–´ ===
        drugs_group = QGroupBox("–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã")
        drugs_layout = QVBoxLayout()
        
        drugs_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç:")
        drugs_layout.addWidget(drugs_label)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        self.drugs_button_group = QButtonGroup(self)
        
        self.drug_none = QRadioButton("–ù–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤")
        self.drug_aspirin = QRadioButton("–ê–°–ö")
        self.drug_clopidogrel = QRadioButton("–ö–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        self.drug_aspirin_clopidogrel = QRadioButton("–ê–°–ö+–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª")
        self.drug_aspirin_ticagrelor = QRadioButton("–ê–°–ö+—Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        self.drugs_button_group.addButton(self.drug_none, 0)
        self.drugs_button_group.addButton(self.drug_aspirin, 1)
        self.drugs_button_group.addButton(self.drug_clopidogrel, 2)
        self.drugs_button_group.addButton(self.drug_aspirin_clopidogrel, 3)
        self.drugs_button_group.addButton(self.drug_aspirin_ticagrelor, 4)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤" –ø–æ —É–º–æ–ª—á–∞–Ω–æ
        self.drug_none.setChecked(True)
        
        drugs_layout.addWidget(self.drug_none)
        drugs_layout.addWidget(self.drug_aspirin)
        drugs_layout.addWidget(self.drug_clopidogrel)
        drugs_layout.addWidget(self.drug_aspirin_clopidogrel)
        drugs_layout.addWidget(self.drug_aspirin_ticagrelor)
        
        drugs_group.setLayout(drugs_layout)
        layout.addWidget(drugs_group)

        # === –ì–†–£–ü–ü–ê 7: –î–ï–ô–°–¢–í–ò–Ø ===
        actions_group = QGroupBox("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
        actions_layout = QVBoxLayout()
        
        self.report_button = QPushButton("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        self.report_button.clicked.connect(self.generate_report)
        actions_layout.addWidget(self.report_button)

        # –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PDF
        self.save_doc_button = QPushButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ DOC")
        self.save_doc_button.clicked.connect(self.save_report_to_doc)
        actions_layout.addWidget(self.save_doc_button)
        
        actions_group.setLayout(actions_layout)
        layout.addWidget(actions_group)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(content_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(scroll_area)

        self.excel_filename = DEFAULT_FILENAME
        self.patient_data = None
        self.current_report_html = ""
        self.current_report_data = None

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 1ex;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #2c3e50;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #f8f9fa;
            }
            QLineEdit:focus {
                border: 2px solid #3498db;
                background-color: white;
            }
            QComboBox {
                padding: 5px;
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #ecf0f1;
            }
            QComboBox:focus {
                border: 2px solid #3498db;
            }
            QPushButton {
                padding: 8px 16px;
                border: 2px solid #3498db;
                border-radius: 5px;
                background-color: #3498db;
                color: white;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
            QRadioButton {
                spacing: 8px;
                font-weight: normal;
            }
            QRadioButton::indicator {
                width: 18px;
                height: 18px;
            }
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –ø–æ–ª—è–º
        self.age.textChanged.connect(self.validate_age)
        self.weight.textChanged.connect(self.validate_weight)
        self.height_field.textChanged.connect(self.validate_height)
        self.creatinine.textChanged.connect(self.validate_creatinine)
        self.creatinine_clearance.textChanged.connect(self.validate_creatinine_clearance)
        self.mpv.textChanged.connect(self.validate_mpv)
        self.plcr.textChanged.connect(self.validate_plcr)
        self.spontaneous_aggregation.textChanged.connect(self.validate_spontaneous_aggregation)
        self.induced_aggregation_1_ADP.textChanged.connect(self.validate_induced_aggregation_1_ADP)
        self.induced_aggregation_5_ADP.textChanged.connect(self.validate_induced_aggregation_5_ADP)
        self.induced_aggregation_15_ARA.textChanged.connect(self.validate_induced_aggregation_15_ARA)

    # –ú–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def validate_age(self):
        try:
            age = int(self.age.text())
            if age <= 0 or age > 120:
                self.age.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.age.setStyleSheet("")
                return True
        except ValueError:
            self.age.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
            return False

    def validate_weight(self):
        try:
            weight = float(self.weight.text())
            if weight <= 0 or weight > 300:
                self.weight.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.weight.setStyleSheet("")
                return True
        except ValueError:
            self.weight.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
            return False

    def validate_height(self):
        try:
            height = float(self.height_field.text())
            if height <= 0 or height > 250:
                self.height_field.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.height_field.setStyleSheet("")
                return True
        except ValueError:
            if self.height_field.text():
                self.height_field.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.height_field.setStyleSheet("")
                return True

    def validate_creatinine(self):
        try:
            creatinine = float(self.creatinine.text())
            if creatinine <= 0 or creatinine > 1000:
                self.creatinine.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine.setStyleSheet("")
                return True
        except ValueError:
            if self.creatinine.text():
                self.creatinine.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine.setStyleSheet("")
                return True

    def validate_creatinine_clearance(self):
        try:
            clearance = float(self.creatinine_clearance.text())
            if clearance <= 0 or clearance > 200:
                self.creatinine_clearance.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine_clearance.setStyleSheet("")
                return True
        except ValueError:
            if self.creatinine_clearance.text():
                self.creatinine_clearance.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.creatinine_clearance.setStyleSheet("")
                return True

    def validate_mpv(self):
        try:
            mpv = float(self.mpv.text())
            if mpv <= 0 or mpv > 20:
                self.mpv.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.mpv.setStyleSheet("")
                return True
        except ValueError:
            if self.mpv.text():
                self.mpv.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.mpv.setStyleSheet("")
                return True

    def validate_plcr(self):
        try:
            plcr = float(self.plcr.text())
            if plcr < 0 or plcr > 100:
                self.plcr.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.plcr.setStyleSheet("")
                return True
        except ValueError:
            if self.plcr.text():
                self.plcr.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.plcr.setStyleSheet("")
                return True

    def validate_spontaneous_aggregation(self):
        try:
            agg = float(self.spontaneous_aggregation.text())
            if agg < 0 or agg > 100:
                self.spontaneous_aggregation.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.spontaneous_aggregation.setStyleSheet("")
                return True
        except ValueError:
            if self.spontaneous_aggregation.text():
                self.spontaneous_aggregation.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.spontaneous_aggregation.setStyleSheet("")
                return True

    def validate_induced_aggregation_1_ADP(self):
        try:
            agg = float(self.induced_aggregation_1_ADP.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_1_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_1_ADP.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_1_ADP.text():
                self.induced_aggregation_1_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_1_ADP.setStyleSheet("")
                return True

    def validate_induced_aggregation_5_ADP(self):
        try:
            agg = float(self.induced_aggregation_5_ADP.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_5_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_5_ADP.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_5_ADP.text():
                self.induced_aggregation_5_ADP.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_5_ADP.setStyleSheet("")
                return True

    def validate_induced_aggregation_15_ARA(self):
        try:
            agg = float(self.induced_aggregation_15_ARA.text())
            if agg < 0 or agg > 100:
                self.induced_aggregation_15_ARA.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_15_ARA.setStyleSheet("")
                return True
        except ValueError:
            if self.induced_aggregation_15_ARA.text():
                self.induced_aggregation_15_ARA.setStyleSheet("background-color: #ffcccc; border: 2px solid red;")
                return False
            else:
                self.induced_aggregation_15_ARA.setStyleSheet("")
                return True

    def validate_all_fields(self):
        validations = [
            self.validate_age(),
            self.validate_weight(),
            self.validate_height(),
            self.validate_creatinine(),
            self.validate_creatinine_clearance(),
            self.validate_mpv(),
            self.validate_plcr(),
            self.validate_spontaneous_aggregation(),
            self.validate_induced_aggregation_1_ADP(),
            self.validate_induced_aggregation_5_ADP(),
            self.validate_induced_aggregation_15_ARA()
        ]

        if not all(validations):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –ø–æ–ª—è—Ö (–≤—ã–¥–µ–ª–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º)")
            return False
        return True

    def format_html_table(self, headers, rows):
        html = '<table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%; margin: 10px 0; font-size: 12px;">'
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        html += '<tr style="background-color: #f2f2f2; font-weight: bold;">'
        for header in headers:
            html += f'<th style="border: 1px solid #000; padding: 8px; text-align: center;">{header}</th>'
        html += '</tr>'
        
        # –î–∞–Ω–Ω—ã–µ
        for row in rows:
            html += '<tr>'
            for cell in row:
                html += f'<td style="border: 1px solid #000; padding: 8px; text-align: center;">{cell}</td>'
            html += '</tr>'
        
        html += '</table>'
        return html

    def get_selected_drug(self):
        if self.drug_aspirin.isChecked():
            return "–ê–°–ö"
        elif self.drug_clopidogrel.isChecked():
            return "–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª"
        elif self.drug_aspirin_clopidogrel.isChecked():
            return "–ê–°–ö+–∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª"
        elif self.drug_aspirin_ticagrelor.isChecked():
            return "–ê–°–ö+—Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä"
        else:
            return ""

    def save_report_to_doc(self):
        if not hasattr(self, 'current_report_data') or not self.current_report_data:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç")
            return
            
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ DOC", 
            f"–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π_–æ—Ç—á–µ—Ç_{QDate.currentDate().toString('yyyy-MM-dd')}.docx",
            "Word Documents (*.docx);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if filename:
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                doc = docx.Document()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = doc.add_heading('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø', 0)
                title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                doc.add_paragraph(f"–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {self.current_report_data['date']}")
                doc.add_paragraph(f"–§–ò–û: {self.current_report_data['name']}")
                doc.add_paragraph(f"–í–æ–∑—Ä–∞—Å—Ç: {self.current_report_data['age']}")
                doc.add_paragraph()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö
                doc.add_paragraph().add_run("–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç–æ–≤:").bold = True
                doc.add_paragraph(f"–ê–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: {self.current_report_data['drugs']}")
                doc.add_paragraph()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                add_table_with_title(doc, 
                    ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–û—Ü–µ–Ω–∫–∞", "–ü—Ä–æ–≥–Ω–æ–∑"],
                    self.current_report_data['main_table_rows'],
                    "–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞—Ç–æ–≤:"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–û—Ü–µ–Ω–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['cyp_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ì–ï–ù–û–¢–ò–ü–ê CYP 2C19"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞ ABCB1", "–û—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['abcb1_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ê–ö–¢–ò–í–ù–û–°–¢–ò –¢–†–ê–ù–°–ü–û–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´ P-–ì–õ–ò–ö–û–ü–†–û–¢–ï–ò–ù–ê"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['ticagrelor_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –¢–ò–ö–ê–ì–†–ï–õ–û–†–û–ú"
                )
                
                add_table_with_title(doc,
                    ["–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã, % –¢-–∫—Ä—ã–≤–∞—è", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                    self.current_report_data['aspirin_table_rows'],
                    "–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –ê–¶–ï–¢–ò–õ–°–ê–õ–ò–¶–ò–õ–û–í–û–ô –ö–ò–°–õ–û–¢–û–ô"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.save(filename)
                QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DOC —Ñ–∞–π–ª:\n{filename}")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å DOC —Ñ–∞–π–ª:\n{str(e)}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ DOC: {e}")

    def generate_report(self):
        try:
            if not self.validate_all_fields():
                return
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            date = QDate.currentDate().toString("dd.MM.yyyy")
            name = "____________________________________"
            age = self.age.text() if self.age.text() else "______"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            T_adp = float(self.induced_aggregation_5_ADP.text()) if self.induced_aggregation_5_ADP.text() else None
            T_ara = float(self.induced_aggregation_15_ARA.text()) if self.induced_aggregation_15_ARA.text() else None
            
            # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            cyp_genotype = self.cyp2c19.currentText() if self.cyp2c19.currentText() else "______"
            abcb1_genotype = self.abcb1.currentText() if self.abcb1.currentText() else "______"
            
            # –î–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ä–∞–ø–∏–∏
            selected_drug = self.get_selected_drug()
            drugs_str = selected_drug if selected_drug else "___________"

            # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            try:
                gender_val = 1 if self.gender.currentText() == "–ú—É–∂" else 2 if self.gender.currentText() == "–ñ–µ–Ω" else 0
                prognosis_value = mod1(
                    gender_val,
                    float(self.age.text()) if self.age.text() else 0,
                    float(self.weight.text()) if self.weight.text() else 0,
                    float(self.height_field.text()) if self.height_field.text() else 0,
                    float(self.creatinine.text()) if self.creatinine.text() else 0,
                    float(self.creatinine_clearance.text()) if self.creatinine_clearance.text() else 0,
                    float(self.mpv.text()) if self.mpv.text() else 0,
                    float(self.plcr.text()) if self.plcr.text() else 0,
                    float(self.spontaneous_aggregation.text()) if self.spontaneous_aggregation.text() else 0,
                    float(self.induced_aggregation_1_ADP.text()) if self.induced_aggregation_1_ADP.text() else 0,
                    float(self.induced_aggregation_5_ADP.text()) if self.induced_aggregation_5_ADP.text() else 0,
                    float(self.induced_aggregation_15_ARA.text()) if self.induced_aggregation_15_ARA.text() else 0
                )
                prognosis_evaluation = mod1_text(prognosis_value)
            except Exception as e:
                prognosis_value = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
                prognosis_evaluation = ("–û—à–∏–±–∫–∞", ["–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DOC —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.current_report_data = {
                'date': date,
                'name': name,
                'age': age,
                'drugs': drugs_str,
                'main_table_rows': [],
                'cyp_table_rows': [],
                'abcb1_table_rows': [],
                'ticagrelor_table_rows': [],
                'aspirin_table_rows': []
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü
            html_report = f"""
            <html>
            <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ text-align: center; font-size: 16px; font-weight: bold; margin-bottom: 20px; }}
                .section {{ margin: 20px 0; }}
                .section-title {{ font-size: 14px; font-weight: bold; margin-bottom: 10px; }}
                table {{ border-collapse: collapse; width: 100%; margin: 10px 0; }}
                th, td {{ border: 1px solid #000; padding: 8px; text-align: center; }}
                th {{ background-color: #f2f2f2; font-weight: bold; }}
            </style>
            </head>
            <body>
                <div class="header">–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø</div>
                
                <p><strong>–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</strong> {date}</p>
                <p><strong>–§–ò–û:</strong> {name}</p>
                <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {age}</p>
                
                <div class="section">
                    <div class="section-title">–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç–æ–≤:</div>
                    <p><strong>–ê–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:</strong> {drugs_str}</p>
                </div>
            """

            # –¢–∞–±–ª–∏—Ü–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            main_table_headers = ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ö—Ä–∏—Ç–µ—Ä–∏–π", "–û—Ü–µ–Ω–∫–∞", "–ü—Ä–æ–≥–Ω–æ–∑"]
            main_table_rows = []

            # –°—Ç—Ä–æ–∫–∞ 1: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
            if isinstance(prognosis_value, (int, float)):
                if prognosis_value <= 1.56:
                    criterion = "‚â§ 1.56"
                    evaluation = "–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è"
                    prognosis_text = "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è"
                elif 1.561 <= prognosis_value <= 2.087:
                    criterion = "1.561-2.087"
                    evaluation = "–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è"
                    prognosis_text = "–í–æ–∑–º–æ–∂–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ–¥–∞"
                else:
                    criterion = "> 2.08"
                    evaluation = "–†–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π"
                    prognosis_text = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –∏ –ª–µ—Ç–∞–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥"
                main_table_rows.append([
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –û–ö–°",
                    f"{prognosis_value:.3f}",
                    criterion,
                    evaluation,
                    prognosis_text
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –û–ö–°",
                    f"{prognosis_value:.3f}",
                    criterion,
                    evaluation,
                    prognosis_text
                ])
            else:
                main_table_rows.append([
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –û–ö–°",
                    prognosis_value,
                    "-",
                    "-",
                    "-"
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –û–ö–°",
                    prognosis_value,
                    "-",
                    "-",
                    "-"
                ])

            # –°—Ç—Ä–æ–∫–∞ 2: –ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§
            if T_adp is not None:
                if T_adp <= 10:
                    criterion_adp = "T ‚â§ 10 %"
                    evaluation_adp = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    prognosis_adp = "–†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                elif 10 < T_adp < 25:
                    criterion_adp = "10 < T < 25 %"
                    evaluation_adp = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    prognosis_adp = "–¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                else:
                    criterion_adp = "T ‚â• 25 %"
                    evaluation_adp = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                    prognosis_adp = "–¢–µ—Ä–∞–ø–∏—è –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"

                main_table_rows.append([
                    "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                    f"{T_adp}%",
                    criterion_adp,
                    evaluation_adp,
                    prognosis_adp
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                    f"{T_adp}%",
                    criterion_adp,
                    evaluation_adp,
                    prognosis_adp
                ])
            else:
                main_table_rows.append([
                    "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                    "______",
                    "-",
                    "-",
                    "-"
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                    "______",
                    "-",
                    "-",
                    "-"
                ])

            # –°—Ç—Ä–æ–∫–∞ 3: –ì–µ–Ω–æ—Ç–∏–ø CYP 2C19
            if cyp_genotype != "______":
                if cyp_genotype == "CYP 2c19*1":
                    evaluation_cyp = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞"
                    prognosis_cyp = "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ä–∞–ø–∏–∏ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–æ–º"
                elif cyp_genotype in ["CYP 2c19*2", "CYP 2c19*3"]:
                    evaluation_cyp = "–ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞"
                    prognosis_cyp = "–í–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª—É"
                elif cyp_genotype == "CYP 2c19*17":
                    evaluation_cyp = "–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞"
                    prognosis_cyp = "–í–æ–∑–º–æ–∂–Ω–æ —É–≥–Ω–µ—Ç–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏, —Ä–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                else:
                    evaluation_cyp = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ–Ω–æ—Ç–∏–ø"
                    prognosis_cyp = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"

                main_table_rows.append([
                    "–ì–µ–Ω–æ—Ç–∏–ø CYP 2C19, –≤–ª–∏—è—é—â–∏–π –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    cyp_genotype,
                    cyp_genotype,
                    evaluation_cyp,
                    prognosis_cyp
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ì–µ–Ω–æ—Ç–∏–ø CYP 2C19, –≤–ª–∏—è—é—â–∏–π –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    cyp_genotype,
                    cyp_genotype,
                    evaluation_cyp,
                    prognosis_cyp
                ])
            else:
                main_table_rows.append([
                    "–ì–µ–Ω–æ—Ç–∏–ø CYP 2C19, –≤–ª–∏—è—é—â–∏–π –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    "______",
                    "-",
                    "-",
                    "-"
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ì–µ–Ω–æ—Ç–∏–ø CYP 2C19, –≤–ª–∏—è—é—â–∏–π –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    "______",
                    "-",
                    "-",
                    "-"
                ])

            # –°—Ç—Ä–æ–∫–∞ 4: –ì–µ–Ω–æ—Ç–∏–ø ABCB1
            if abcb1_genotype != "______":
                if abcb1_genotype == "TT":
                    evaluation_abcb1 = "–í—ã–≤–µ–¥–µ–Ω–∏–µ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ —É—Å–∫–æ—Ä–µ–Ω–æ"
                    prognosis_abcb1 = "–í–µ—Ä–æ—è—Ç–Ω–∞ —Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª—É"
                elif abcb1_genotype == "TC":
                    evaluation_abcb1 = "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞"
                    prognosis_abcb1 = "–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–∑–Ω–∞—á–∏–º–æ–µ –≤–ª–∏—è–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–∏–∏"
                elif abcb1_genotype == "CC":
                    evaluation_abcb1 = "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞"
                    prognosis_abcb1 = "–í–ª–∏—è–Ω–∏—è –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ä–∞–ø–∏–∏ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–æ–º –Ω–µ—Ç"
                else:
                    evaluation_abcb1 = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ–Ω–æ—Ç–∏–ø"
                    prognosis_abcb1 = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"

                main_table_rows.append([
                    "–ì–µ–Ω–æ—Ç–∏–ø ABCB1, –≤–ª–∏—è—é—â–∏–π –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞",
                    abcb1_genotype,
                    abcb1_genotype,
                    evaluation_abcb1,
                    prognosis_abcb1
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ì–µ–Ω–æ—Ç–∏–ø ABCB1, –≤–ª–∏—è—é—â–∏–π –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞",
                    abcb1_genotype,
                    abcb1_genotype,
                    evaluation_abcb1,
                    prognosis_abcb1
                ])
            else:
                main_table_rows.append([
                    "–ì–µ–Ω–æ—Ç–∏–ø ABCB1, –≤–ª–∏—è—é—â–∏–π –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞",
                    "______",
                    "-",
                    "-",
                    "-"
                ])
                
                self.current_report_data['main_table_rows'].append([
                    "–ì–µ–Ω–æ—Ç–∏–ø ABCB1, –≤–ª–∏—è—é—â–∏–π –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞",
                    "______",
                    "-",
                    "-",
                    "-"
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –æ—Ç—á–µ—Ç
            html_report += self.format_html_table(main_table_headers, main_table_rows)

            # –¢–∞–±–ª–∏—Ü–∞ 2: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ä–∞–ø–∏–∏ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–æ–º (CYP2C19)
            html_report += """
            <div class="section">
                <div class="section-title">–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ì–ï–ù–û–¢–ò–ü–ê CYP 2C19</div>
            """

            cyp_table_headers = [
                "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                "–û—Ü–µ–Ω–∫–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ]
            
            cyp_table_rows = []
            if T_adp is not None and cyp_genotype != "______":
                if T_adp <= 10:
                    criterion = "T ‚â§ 10 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                elif 10 < T_adp < 25:
                    criterion = "10 < T < 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                else:
                    criterion = "T ‚â• 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                
                if cyp_genotype == "CYP 2c19*1":
                    metabolism = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"
                    if T_adp <= 10:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–ª–∞–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π"
                elif cyp_genotype in ["CYP 2c19*2", "CYP 2c19*3"]:
                    metabolism = "–ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"
                    if T_adp <= 10:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–ó–∞–º–µ–Ω–∞ –Ω–∞ –ø—Ä–∞—Å—É–≥—Ä–µ–ª –∏–ª–∏ —Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä. –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π"
                elif cyp_genotype == "CYP 2c19*17":
                    metabolism = "–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"
                    if T_adp <= 10:
                        recommendation = "–°–Ω–∏–∑–∏—Ç—å –¥–æ–∑—É –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–ª–∞–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π"
                else:
                    metabolism = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"
                    recommendation = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
                
                cyp_table_rows.append([f"{T_adp}%", criterion, state, cyp_genotype, metabolism, recommendation])
                self.current_report_data['cyp_table_rows'].append([f"{T_adp}%", criterion, state, cyp_genotype, metabolism, recommendation])
            else:
                cyp_table_rows.append(["______", "-", "-", "-", "-", "-"])
                self.current_report_data['cyp_table_rows'].append(["______", "-", "-", "-", "-", "-"])

            html_report += self.format_html_table(cyp_table_headers, cyp_table_rows)
            html_report += "</div>"

            # –¢–∞–±–ª–∏—Ü–∞ 3: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ä–∞–ø–∏–∏ –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–æ–º (ABCB1)
            html_report += """
            <div class="section">
                <div class="section-title">–ö–û–†–†–ï–ö–¶–ò–Ø –¢–ï–†–ê–ü–ò–ò –ö–õ–û–ü–ò–î–û–ì–†–ï–õ–û–ú –° –£–ß–ï–¢–û–ú –ê–ö–¢–ò–í–ù–û–°–¢–ò –¢–†–ê–ù–°–ü–û–†–¢–ù–û–ô –°–ò–°–¢–ï–ú–´ –†-–ì–õ–ò–ö–û–ü–†–û–¢–ï–ò–ù–ê</div>
            """

            abcb1_table_headers = [
                "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                "–ì–µ–Ω–æ—Ç–∏–ø –ø–∞—Ü–∏–µ–Ω—Ç–∞ ABCB1",
                "–û—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ]
            
            abcb1_table_rows = []
            if T_adp is not None and abcb1_genotype != "______":
                if T_adp <= 10:
                    criterion = "T ‚â§ 10 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                elif 10 < T_adp < 25:
                    criterion = "10 < T < 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                else:
                    criterion = "T ‚â• 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                
                if abcb1_genotype == "TT":
                    transport = "–£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã–≤–µ–¥–µ–Ω–∏–µ"
                    if T_adp <= 10:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ–∑—É –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞ –∏–ª–∏ –∑–∞–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç"
                elif abcb1_genotype == "TC":
                    transport = "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã–≤–µ–¥–µ–Ω–∏–µ"
                    if T_adp <= 10:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥re–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–∑—ã"
                elif abcb1_genotype == "CC":
                    transport = "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—ã–≤–µ–¥–µ–Ω–∏–µ"
                    if T_adp <= 10:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                    elif 10 < T_adp < 25:
                        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∫–ª–æ–ø–∏–¥–æ–≥—Ä–µ–ª–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                    else:
                        recommendation = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–ª–∞–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π"
                else:
                    transport = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                    recommendation = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
                
                abcb1_table_rows.append([f"{T_adp}%", criterion, state, abcb1_genotype, transport, recommendation])
                self.current_report_data['abcb1_table_rows'].append([f"{T_adp}%", criterion, state, abcb1_genotype, transport, recommendation])
            else:
                abcb1_table_rows.append(["______", "-", "-", "-", "-", "-"])
                self.current_report_data['abcb1_table_rows'].append(["______", "-", "-", "-", "-", "-"])

            html_report += self.format_html_table(abcb1_table_headers, abcb1_table_rows)
            html_report += "</div>"

            # –¢–∞–±–ª–∏—Ü–∞ 4: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ä–∞–ø–∏–∏ —Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä–æ–º
            html_report += """
            <div class="section">
                <div class="section-title">–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –¢–ò–ö–ê–ì–†–ï–õ–û–†–û–ú</div>
            """

            ticagrelor_table_headers = [
                "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 5 –º–∫–ú–æ–ª—å –ê–î–§, % –¢-–∫—Ä–∏–≤–∞—è",
                "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ]
            
            ticagrelor_table_rows = []
            if T_adp is not None:
                if T_adp <= 10:
                    criterion = "T ‚â§ 10 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    recommendation = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–∑—ã"
                elif 10 < T_adp < 25:
                    criterion = "10 < T < 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º —Ç–∏–∫–∞–≥—Ä–µ–ª–æ—Ä–∞. –¢–µ—Ä–∞–ø–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞"
                else:
                    criterion = "T ‚â• 25 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                    recommendation = "–¢–µ—Ä–∞–ø–∏—è –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞. –ó–∞–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–Ω—Ç–∏–∞–≥—Ä–µ–≥–∞–Ω—Ç"
                
                ticagrelor_table_rows.append([f"{T_adp}%", criterion, state, recommendation])
                self.current_report_data['ticagrelor_table_rows'].append([f"{T_adp}%", criterion, state, recommendation])
            else:
                ticagrelor_table_rows.append(["______", "-", "-", "-"])
                self.current_report_data['ticagrelor_table_rows'].append(["______", "-", "-", "-"])

            html_report += self.format_html_table(ticagrelor_table_headers, ticagrelor_table_rows)
            html_report += "</div>"

            # –¢–∞–±–ª–∏—Ü–∞ 5: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ—Ä–∞–ø–∏–∏ –∞—Ü–µ—Ç–∏–ª—Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π
            html_report += """
            <div class="section">
                <div class="section-title">–ö–û–†–†–ï–ö–¶–ò–Ø –§–ê–†–ú–ê–ö–û–¢–ï–†–ê–ü–ò–ò –ê–¶–ï–¢–ò–õ–°–ê–õ–ò–¶–ò–õ–û–í–û–ô –ö–ò–°–õ–û–¢–û–ô</div>
            """

            aspirin_table_headers = [
                "–ò–Ω–¥—É—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è 15 –º–∫–ª –∞—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã, % –¢-–∫—Ä–∏–≤–∞—è",
                "–ö—Ä–∏—Ç–µ—Ä–∏–π",
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ]
            
            aspirin_table_rows = []
            if T_ara is not None:
                if T_ara <= 2:
                    criterion = "–¢ ‚â§ 2 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    recommendation = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∞—Ü–µ—Ç–∏–ª—Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã"
                elif 2 < T_ara < 8:
                    criterion = "2 < –¢ < 8 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∞"
                    recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º –∞—Ü–µ—Ç–∏–ª—Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã. –†–∏—Å–∫ –≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π"
                else:
                    criterion = "–¢ ‚â• 8 %"
                    state = "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
                    recommendation = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–ª–∞–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ó–∞–º–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç –∞—Ü–µ—Ç–∏–ª—Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π"
                
                aspirin_table_rows.append([f"{T_ara}%", criterion, state, recommendation])
                self.current_report_data['aspirin_table_rows'].append([f"{T_ara}%", criterion, state, recommendation])
            else:
                aspirin_table_rows.append(["______", "-", "-", "-"])
                self.current_report_data['aspirin_table_rows'].append(["______", "-", "-", "-"])

            html_report += self.format_html_table(aspirin_table_headers, aspirin_table_rows)
            html_report += "</div>"

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML
            html_report += """
            </body>
            </html>
            """

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
            self.current_report_html = html_report

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ
            report_dialog = QDialog(self)
            report_dialog.setWindowTitle("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç")
            report_dialog.resize(900, 700)

            layout = QVBoxLayout(report_dialog)
            text_edit = QTextEdit()
            text_edit.setHtml(html_report)
            text_edit.setReadOnly(True)
            layout.addWidget(text_edit)

            close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_button.clicked.connect(report_dialog.accept)
            layout.addWidget(close_button)

            report_dialog.exec()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", 
                            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n{str(e)}")
            print(f"–û—à–∏–±–∫–∞ –≤ generate_report: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())